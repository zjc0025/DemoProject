<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!-- 扫描web相关的bean -->
    <context:component-scan base-package="com.xxx.*.controller"/>

    <!-- 开启SpringMVC注解模式 -->
    <mvc:annotation-driven/>

    <!-- 静态资源默认servlet配置 -->
    <mvc:default-servlet-handler/>

    <!-- 配置jsp 显示ViewResolver -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/resources/views/"/>
        <property name="suffix" value=".html"/>
    </bean>

    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash;-->
                <!--/**的意思是所有文件夹及里面的子文件夹-->
                <!--/*是所有文件夹，不含子文件夹-->
                <!--/是web项目的根目录-->
              <!--&ndash;&gt;-->
            <!--<mvc:mapping path="/**" />-->
            <!--&lt;!&ndash; 需排除拦截的地址 &ndash;&gt;-->
            <!--&lt;!&ndash;  <mvc:exclude-mapping path="/userController/user"/>  &ndash;&gt;-->
            <!--<bean id="commonInterceptor" class="com.xxx.common.interceptor.TestInterceptor"></bean> &lt;!&ndash;这个类就是我们自定义的Interceptor &ndash;&gt;-->
        <!--</mvc:interceptor>-->
        <!--&lt;!&ndash; 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法  &ndash;&gt;-->
    <!--</mvc:interceptors>-->

    <!-- 包含shiro的配置文件 -->
    <import resource="classpath:applicationContext-shiro.xml"/>


    <!-- 配置shiro开启注解支持 -->
    <bean id="defaultAdvisorAutoProxyCreator"
          class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
        <!-- 强行指定使用cglib代理 -->
        <property name="proxyTargetClass" value="true" />
    </bean>
    <!-- 配置shiro框架提供的切面类，用于创建代理对象 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor" />


</beans>